{"ast":null,"code":"var _jsxFileName = \"c:\\\\Users\\\\rdoug\\\\Planit\\\\client\\\\src\\\\pages\\\\signup.js\";\n//sign up page\nimport React, { Component } from \"react\"; // import { BrowserRouter } from \"react-router-dom\";\n\nimport { Redirect } from \"react-router\";\nimport Cookies from \"js-cookie\";\nimport SignUpBtn from \"../components/SignupBtn\"; // import TopInterests from \"../components/TopInterests\";\n// import OtherInterests from \"../components/OtherInterests\";\n\nimport API from \"../utils/API\";\n\nclass SignUp extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: \"\",\n      username: \"\",\n      password: \"\",\n      redirect: false,\n      cookieUsername: \"\",\n      cookieID: \"\"\n    };\n\n    this.componentDidMount = () => {\n      console.log('yo');\n      API.getUsers().then(res => console.log(res));\n      API.getPosts().then(res => console.log(res));\n    };\n\n    this.handleInputChange = async event => {\n      const name = event.target.name;\n      const value = event.target.value;\n      await this.setState({\n        [name]: value\n      });\n      console.log(this.state);\n    };\n\n    this.handleFormSubmit = event => {\n      event.preventDefault(); // let uNameExists = false;\n      // function checking if username exists already - if does prompts for new entry, if not creates new user\n      // this.setState({\n      //     cookieUsername: JSON.parse(atob(Cookies.get(\"session\"))).username,\n      //     cookieID: JSON.parse(atob(Cookies.get(\"session\"))).id\n      // });\n      // API.getUsers()\n      //     .then(res => {\n      //         console.log(uNameExists);\n      //         // console.log(res.data[0].username);\n      //         console.log(this.state.username);\n      //         this.setState({\n      //             cookieUsername: JSON.parse(atob(Cookies.get(\"session\"))).username,\n      //             cookieID: JSON.parse(atob(Cookies.get(\"session\"))).id\n      //         });\n      //         for (var i = 0; i < res.data.length; i++) {\n      //             if (res.data[i].username === this.state.username) {\n      //                 uNameExists = true;\n      //             }\n      //         }\n      //         uNameExists ? console.log(\"this username already exists\") : console.log(\"create new user\");\n      //         if (!uNameExists) {\n      //             console.log(this.state)\n      //             API.createUser({\n      //                 name: this.state.name,\n      //                 username: this.state.username,\n      //                 pword: this.state.password\n      //             }).then(response => {\n      //                 console.log(this.state.username + \" created\")\n      //             }).catch(error => console.log(error));\n      //         }\n      //         uNameExists ? alert(\"This username already exists. Please choose a different one.\") : alert(\"Welcome, \" + this.state.username + \"!\");\n      //     })\n\n      API.getUsers().then(response => {\n        console.log(\"Response JSON\");\n        console.log(response);\n        let userExists = false; // *******************************************\n        // check username bug\n\n        for (var i = 0; i < response.data.length; i++) {\n          if (this.state.username === response.data.length) {\n            userExists = true;\n            alert(\"This username already exists.\");\n            this.setState({\n              username: \"\",\n              pword: \"\",\n              redirect: false,\n              cookieUsername: \"\",\n              cookieID: \"\"\n            });\n            return console.log(\"Username already exists\");\n          } else {\n            console.log(\"User does not exist\");\n            return API.createUser({\n              name: this.state.name,\n              username: this.state.username,\n              pword: this.state.password\n            }).then(response => {\n              this.setState({\n                redirect: true\n              });\n              console.log(this.state.username + \" created\");\n              alert(this.state.username + \" has been created!\");\n            }).catch(error => console.log(error));\n          }\n        }\n\n        console.log(\"response JSON end\");\n      }).catch(err => console.log(err));\n    };\n  }\n\n  render() {\n    const redirect = this.state.redirect;\n\n    if (redirect) {\n      return React.createElement(Redirect, {\n        to: \"/signin\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      id: \"signupForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"signupName\",\n      type: \"text\",\n      name: \"name\",\n      placeholder: \"Name\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"signupUName\",\n      type: \"text\",\n      name: \"username\",\n      placeholder: \"Username\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"signupPword\",\n      type: \"text\",\n      name: \"password\",\n      placeholder: \"Password\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(SignUpBtn, {\n      onClick: this.handleFormSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default SignUp;","map":{"version":3,"sources":["c:\\Users\\rdoug\\Planit\\client\\src\\pages\\signup.js"],"names":["React","Component","Redirect","Cookies","SignUpBtn","API","SignUp","state","name","username","password","redirect","cookieUsername","cookieID","componentDidMount","console","log","getUsers","then","res","getPosts","handleInputChange","event","target","value","setState","handleFormSubmit","preventDefault","response","userExists","i","data","length","alert","pword","createUser","catch","error","err","render"],"mappings":"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","sourcesContent":["//sign up page\r\nimport React, { Component } from \"react\";\r\n// import { BrowserRouter } from \"react-router-dom\";\r\nimport { Redirect } from \"react-router\";\r\nimport Cookies from \"js-cookie\";\r\nimport SignUpBtn from \"../components/SignupBtn\"\r\n// import TopInterests from \"../components/TopInterests\";\r\n// import OtherInterests from \"../components/OtherInterests\";\r\nimport API from \"../utils/API\";\r\n\r\n\r\nclass SignUp extends Component {\r\n    state = {\r\n        name: \"\",\r\n        username: \"\",\r\n        password: \"\",\r\n        redirect: false,\r\n        cookieUsername: \"\",\r\n        cookieID: \"\"\r\n    };\r\n    componentDidMount = () => {\r\n        console.log('yo');\r\n        API.getUsers().then((res) => console.log(res));\r\n        API.getPosts().then((res) => console.log(res));\r\n    }\r\n\r\n    handleInputChange = async event => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n        await this.setState({\r\n            [name]: value\r\n        });\r\n        console.log(this.state);\r\n    }\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        // let uNameExists = false;\r\n        // function checking if username exists already - if does prompts for new entry, if not creates new user\r\n        // this.setState({\r\n        //     cookieUsername: JSON.parse(atob(Cookies.get(\"session\"))).username,\r\n        //     cookieID: JSON.parse(atob(Cookies.get(\"session\"))).id\r\n        // });\r\n        // API.getUsers()\r\n        //     .then(res => {\r\n        //         console.log(uNameExists);\r\n        //         // console.log(res.data[0].username);\r\n        //         console.log(this.state.username);\r\n        //         this.setState({\r\n        //             cookieUsername: JSON.parse(atob(Cookies.get(\"session\"))).username,\r\n        //             cookieID: JSON.parse(atob(Cookies.get(\"session\"))).id\r\n        //         });\r\n        //         for (var i = 0; i < res.data.length; i++) {\r\n        //             if (res.data[i].username === this.state.username) {\r\n        //                 uNameExists = true;\r\n        //             }\r\n        //         }\r\n        //         uNameExists ? console.log(\"this username already exists\") : console.log(\"create new user\");\r\n        //         if (!uNameExists) {\r\n        //             console.log(this.state)\r\n        //             API.createUser({\r\n        //                 name: this.state.name,\r\n        //                 username: this.state.username,\r\n        //                 pword: this.state.password\r\n        //             }).then(response => {\r\n        //                 console.log(this.state.username + \" created\")\r\n        //             }).catch(error => console.log(error));\r\n        //         }\r\n        //         uNameExists ? alert(\"This username already exists. Please choose a different one.\") : alert(\"Welcome, \" + this.state.username + \"!\");\r\n        //     })\r\n\r\n        API.getUsers()\r\n            .then(response => {\r\n                console.log(\"Response JSON\");\r\n                console.log(response);\r\n                let userExists = false;\r\n                // *******************************************\r\n                // check username bug\r\n                for (var i = 0; i < response.data.length; i++) {\r\n                    if (this.state.username === response.data.length) {\r\n                        userExists = true;\r\n                        alert(\"This username already exists.\");\r\n                        this.setState({\r\n                            username: \"\",\r\n                            pword: \"\",\r\n                            redirect: false,\r\n                            cookieUsername: \"\",\r\n                            cookieID: \"\"\r\n                        });\r\n                        return console.log(\"Username already exists\");\r\n                    } else {\r\n                        console.log(\"User does not exist\");\r\n                        return API.createUser({\r\n                            name: this.state.name,\r\n                            username: this.state.username,\r\n                            pword: this.state.password\r\n                        }).then(response => {\r\n                            this.setState({redirect: true});\r\n                            console.log(this.state.username + \" created\")\r\n                            alert(this.state.username + \" has been created!\");\r\n                        }).catch(error => console.log(error));\r\n                    }\r\n                }\r\n                console.log(\"response JSON end\");\r\n            })\r\n\r\n\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    render() {\r\n        const { redirect } = this.state;\r\n        if (redirect) {\r\n            return <Redirect to=\"/signin\" />;\r\n        }\r\n        return (\r\n            <div>\r\n                <form id=\"signupForm\">\r\n                    <input id=\"signupName\" type=\"text\" name=\"name\" placeholder=\"Name\" onChange={this.handleInputChange} />\r\n                    <input id=\"signupUName\" type=\"text\" name=\"username\" placeholder=\"Username\" onChange={this.handleInputChange} />\r\n                    <input id=\"signupPword\" type=\"text\" name=\"password\" placeholder=\"Password\" onChange={this.handleInputChange} />\r\n                    <SignUpBtn onClick={this.handleFormSubmit}></SignUpBtn>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignUp;"]},"metadata":{},"sourceType":"module"}