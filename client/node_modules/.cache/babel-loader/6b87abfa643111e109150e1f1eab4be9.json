{"ast":null,"code":"var _jsxFileName = \"c:\\\\Users\\\\rdoug\\\\Planit\\\\client\\\\src\\\\pages\\\\signup.js\";\n//sign up page\nimport React, { Component } from \"react\"; // import { BrowserRouter } from \"react-router-dom\";\n\nimport { Redirect } from \"react-router\";\nimport Cookies from \"js-cookie\";\nimport SignUpBtn from \"../components/SignupBtn\"; // import TopInterests from \"../components/TopInterests\";\n// import OtherInterests from \"../components/OtherInterests\";\n\nimport API from \"../utils/API\";\n\nclass SignUp extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: \"\",\n      username: \"\",\n      password: \"\",\n      redirect: false,\n      cookieUsername: \"\",\n      cookieID: \"\"\n    };\n\n    this.componentDidMount = () => {\n      console.log('yo');\n      API.getUsers().then(res => console.log(res));\n      API.getPosts().then(res => console.log(res));\n    };\n\n    this.handleInputChange = async event => {\n      const name = event.target.name;\n      const value = event.target.value;\n      await this.setState({\n        [name]: value\n      });\n      console.log(this.state);\n    };\n\n    this.resetCookieState = () => {\n      this.setState({\n        cookieUsername: \"\",\n        cookieID: \"\"\n      });\n    };\n\n    this.handleFormSubmit = event => {\n      event.preventDefault();\n      let uNameExists = false; // function checking if username exists already - if does prompts for new entry, if not creates new user\n\n      this.setState({\n        cookieUsername: JSON.parse(atob(Cookies.get(\"session\"))).username,\n        cookieID: JSON.parse(atob(Cookies.get(\"session\"))).id\n      });\n      API.getUsers().then(res => {\n        console.log(uNameExists); // console.log(res.data[0].username);\n\n        console.log(this.state.username);\n\n        for (var i = 0; i < res.data.length; i++) {\n          if (res.data[i].username === this.state.username) {\n            uNameExists = true;\n          }\n        }\n\n        uNameExists ? console.log(\"this username already exists\") : console.log(\"create new user\");\n\n        if (!uNameExists) {\n          console.log(this.state);\n          API.createUser({\n            name: this.state.name,\n            username: this.state.username,\n            pword: this.state.password\n          }).then(response => {\n            console.log(this.state.username + \" created\");\n          }).catch(error => console.log(error));\n        }\n\n        uNameExists ? alert(\"This username already exists. Please choose a different one.\") : alert(\"Welcome, \" + this.state.username + \"!\");\n      }).catch(err => console.log(err));\n\n      if (uNameExists) {\n        this.resetCookieState();\n      }\n    };\n  }\n\n  render() {\n    const redirect = this.state.redirect;\n\n    if (redirect) {\n      return React.createElement(Redirect, {\n        to: \"/signin\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      id: \"signupForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"signupName\",\n      type: \"text\",\n      name: \"name\",\n      placeholder: \"Name\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"signupUName\",\n      type: \"text\",\n      name: \"username\",\n      placeholder: \"Username\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"signupPword\",\n      type: \"text\",\n      name: \"password\",\n      placeholder: \"Password\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(SignUpBtn, {\n      onClick: this.handleFormSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default SignUp;","map":{"version":3,"sources":["c:\\Users\\rdoug\\Planit\\client\\src\\pages\\signup.js"],"names":["React","Component","Redirect","Cookies","SignUpBtn","API","SignUp","state","name","username","password","redirect","cookieUsername","cookieID","componentDidMount","console","log","getUsers","then","res","getPosts","handleInputChange","event","target","value","setState","resetCookieState","handleFormSubmit","preventDefault","uNameExists","JSON","parse","atob","get","id","i","data","length","createUser","pword","response","catch","error","alert","err","render"],"mappings":"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","sourcesContent":["//sign up page\r\nimport React, { Component } from \"react\";\r\n// import { BrowserRouter } from \"react-router-dom\";\r\nimport { Redirect } from \"react-router\";\r\nimport Cookies from \"js-cookie\";\r\nimport SignUpBtn from \"../components/SignupBtn\"\r\n// import TopInterests from \"../components/TopInterests\";\r\n// import OtherInterests from \"../components/OtherInterests\";\r\nimport API from \"../utils/API\";\r\n\r\n\r\nclass SignUp extends Component {\r\n    state = {\r\n        name: \"\",\r\n        username: \"\",\r\n        password: \"\",\r\n        redirect: false,\r\n        cookieUsername: \"\",\r\n        cookieID: \"\"\r\n    };\r\n    componentDidMount = ()  => {\r\n        console.log('yo');\r\n        API.getUsers().then((res) => console.log(res));\r\n        API.getPosts().then((res) => console.log(res));\r\n    }\r\n\r\n    handleInputChange = async event => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n        await this.setState({\r\n            [name]: value\r\n        });\r\n        console.log(this.state);\r\n    }\r\n    resetCookieState = () => {\r\n        this.setState({\r\n            cookieUsername: \"\",\r\n            cookieID: \"\"\r\n        });\r\n    }\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        let uNameExists = false;\r\n        // function checking if username exists already - if does prompts for new entry, if not creates new user\r\n        this.setState({\r\n            cookieUsername: JSON.parse(atob(Cookies.get(\"session\"))).username,\r\n            cookieID: JSON.parse(atob(Cookies.get(\"session\"))).id\r\n        });\r\n        API.getUsers()\r\n            .then(res => {\r\n                console.log(uNameExists);\r\n                // console.log(res.data[0].username);\r\n                console.log(this.state.username);\r\n                for (var i = 0; i < res.data.length; i++) {\r\n                    if (res.data[i].username === this.state.username) {\r\n                        uNameExists = true;\r\n                    }\r\n                }\r\n                uNameExists ? console.log(\"this username already exists\") : console.log(\"create new user\");\r\n                if (!uNameExists) {\r\n                    console.log(this.state)\r\n                    API.createUser({\r\n                        name: this.state.name,\r\n                        username: this.state.username,\r\n                        pword: this.state.password\r\n                    }).then(response => {\r\n                        console.log(this.state.username + \" created\")\r\n                    }).catch(error => console.log(error));\r\n                }\r\n                uNameExists ? alert(\"This username already exists. Please choose a different one.\") : alert(\"Welcome, \" + this.state.username + \"!\");\r\n            })\r\n            .catch(err => console.log(err));\r\n            if (uNameExists) {\r\n                this.resetCookieState();\r\n            }\r\n    };\r\n\r\n    render() {\r\n        const { redirect } = this.state;\r\n        if (redirect) {\r\n            return <Redirect to=\"/signin\" />;\r\n        }\r\n        return (\r\n            <div>\r\n                <form id=\"signupForm\">\r\n                    <input id=\"signupName\" type=\"text\" name=\"name\" placeholder=\"Name\" onChange={this.handleInputChange} />\r\n                    <input id=\"signupUName\" type=\"text\" name=\"username\" placeholder=\"Username\" onChange={this.handleInputChange} />\r\n                    <input id=\"signupPword\" type=\"text\" name=\"password\" placeholder=\"Password\" onChange={this.handleInputChange} />\r\n                    <SignUpBtn onClick={this.handleFormSubmit}></SignUpBtn>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignUp;"]},"metadata":{},"sourceType":"module"}