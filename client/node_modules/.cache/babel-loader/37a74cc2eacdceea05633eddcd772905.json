{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar swal = _interopDefault(require('sweetalert'));\n\nvar index = async (...args) => {\n  const newOptions = await getOptions(...args);\n  return swal(newOptions);\n};\n\nconst bindActions = swalInstance => {\n  for (const method in swal) {\n    swalInstance[method] = swal[method];\n  }\n};\n\nconst getOptions = async (params, {\n  identifier,\n  transformer\n}) => {\n  let newOptions = await transformParams(params, identifier, transformer);\n  newOptions = Object.assign({}, parseTextParams(params), newOptions);\n  const lastParam = params[params.length - 1];\n  /*\n   * So that we don't lose other specified options\n   * such as buttons... etc.\n   */\n\n  if (isOptionsParam(lastParam, identifier)) {\n    newOptions = Object.assign({}, lastParam, newOptions);\n  }\n\n  return newOptions;\n};\n\nconst parseTextParams = params => {\n  const options = {};\n\n  const isString = param => typeof param === \"string\";\n\n  if (isString(params[0]) && !isString(params[1])) {\n    options.text = params[0];\n  }\n\n  if (isString(params[1])) {\n    options.title = params[0];\n    options.text = params[1];\n  }\n\n  if (isString(params[2])) {\n    options.icon = params[2];\n  }\n\n  return options;\n}; // Return true if param is a SwalOptions object\n\n\nconst isOptionsParam = (param, isTransformable) => param.constructor === Object && !isTransformable(param);\n/*\n * @params: (SwalParams, Function, Function, boolean)\n * @returns: SwalOptions\n */\n\n\nconst transformParams = async (params, isTransformable, transformer) => {\n  // Check if the transform returns a DOM synchronously\n  // or if it is a promise:\n  const isAsync = transformer() instanceof Promise;\n  /*\n   * Example:\n   *   swal(<div>Hello!</div>);\n   */\n\n  const transformSingleParam = async () => {\n    const el = params[0];\n    if (!isTransformable(el)) return;\n    const newContent = await transformEl(el, transformer, isAsync);\n    return {\n      content: newContent\n    };\n  };\n  /*\n   * Example:\n   *   swal(\"Hi\", { \n   *     content: <div>Hello!</div> \n   *   })\n   */\n\n\n  const transformContentOption = async () => {\n    const lastParamIndex = params.length - 1;\n    const lastParam = params[lastParamIndex];\n    if (!lastParam || !lastParam.content) return;\n    let content = lastParam.content,\n        button = lastParam.button;\n\n    if (isTransformable(content)) {\n      content = await transformEl(content, transformer, isAsync);\n    }\n    /* TODO?\n    if (isTransformable(button)) {\n      button = await transformEl(button, transformer, isAsync);\n    }\n    */\n\n\n    return {\n      content //button,\n\n    };\n  };\n  /*\n   * Only transform the params that can \n   * have a DOM node as their value\n   */\n\n\n  const newOpts = await Promise.all([transformSingleParam(), transformContentOption()]);\n  return Object.assign({}, ...newOpts);\n}; // Transform a single option\n\n\nconst transformEl = async (el, transformer, isAsync) => {\n  return isAsync ? await transformer(el) : transformer(el);\n};\n\nexports['default'] = index;\nexports.bindActions = bindActions;","map":null,"metadata":{},"sourceType":"script"}